1)plus minus
#!/bin/python3

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the 'plusMinus' function below.
# The function accepts INTEGER_ARRAY arr as parameter.

def plusMinus(arr):
    p=0
    n=0
    z=0
    for i in arr:
        if i>0:
            p+=1
        elif i<0:
            n+=1
        else:
            z+=1
    print(p/len(arr));
    print(n/len(arr));
    print(z/len(arr));
    

if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    plusMinus(arr)

2)Min max sum

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'miniMaxSum' function below.
#
# The function accepts INTEGER_ARRAY arr as parameter.
#

def miniMaxSum(arr):
    # Write your code here
    
     x=arr.sort()
     sum1=arr[0]+arr[1]+arr[2]+arr[3]
     sum2=arr[1]+arr[2]+arr[3]+arr[4]
     print(sum1 , sum2)
     
     
if __name__ == '__main__':

    arr = list(map(int, input().rstrip().split()))

    miniMaxSum(arr)

3)xOR Strings 2

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'miniMaxSum' function below.
#
# The function accepts INTEGER_ARRAY arr as parameter.
#

def miniMaxSum(arr):
    # Write your code here
    
     x=arr.sort()
     sum1=arr[0]+arr[1]+arr[2]+arr[3]
     sum2=arr[1]+arr[2]+arr[3]+arr[4]
     print(sum1 , sum2)
     
     
if __name__ == '__main__':

    arr = list(map(int, input().rstrip().split()))

    miniMaxSum(arr)

4)Pangrams

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'pangrams' function below.
#
# The function is expected to return a STRING.
# The function accepts STRING s as parameter.
#

def pangrams(s):
    # Write your code here
    a=s.lower()
    b=[]
    for i in a:
        if i not in b and i!=" ":
            b.append(i)
    if len(b)==26:
            return "pangram"
    else:
        return "not pangram"
            

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = pangrams(s)

    fptr.write(result + '\n')

    fptr.close()
    
5)Diagonal differnce

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'diagonalDifference' function below.
#
# The function is expected to return an INTEGER.
# The function accepts 2D_INTEGER_ARRAY arr as parameter.
#

def diagonalDifference(arr):
    # Write your code here
    sum1,sum2=0,0
    for i in range(n):
        for j in range(n):
            if(i==j):
                sum1=sum1+arr[i][j]
    
            if(i+j==n-1):
                sum2=sum2+arr[i][j]
    
    x=(abs(sum1-sum2))
    return x
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    result = diagonalDifference(arr)

    fptr.write(str(result) + '\n')

    fptr.close()
    
    
6)sparse arrays

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'matchingStrings' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts following parameters:
#  1. STRING_ARRAY strings
#  2. STRING_ARRAY queries
#

def matchingStrings(strings, queries):
    l=[]
    for i in range(len(queries)):
        c=strings.count(queries[i])
        l.append(c)
        
    return l          
                    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    strings_count = int(input().strip())

    strings = []

    for _ in range(strings_count):
        strings_item = input()
        strings.append(strings_item)

    queries_count = int(input().strip())

    queries = []

    for _ in range(queries_count):
        queries_item = input()
        queries.append(queries_item)

    res = matchingStrings(strings, queries)

    fptr.write('\n'.join(map(str, res)))
    fptr.write('\n')

    fptr.close()
    
    
7)lonely integer

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'lonelyinteger' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY a as parameter.
#

def lonelyinteger(a):
    x=list(set(a))
    for i in range(len(x)):
        d=a.count(x[i])
        if d==1:
            return x[i]

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    a = list(map(int, input().rstrip().split()))

    result = lonelyinteger(a)

    fptr.write(str(result) + '\n')

    fptr.close()

8)Time conversion

#!/bin/python3

import math
import os
import random
import re
import sys


def timeConversion(s):
    b=s[:-2]
    a=b[:2]
    c1=int(a)
    if "PM" in s:
        if c1==12:
            return b
        a1=12+c1
        d=b.replace(a,str(a1))
        return d
    elif "AM" in s:
        if c1==12:
            d=b.replace(a,"00")
            return d
        else:
            return b
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = timeConversion(s)

    fptr.write(result + '\n')

    fptr.close()




